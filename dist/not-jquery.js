"use strict";class NotJQuery{constructor(e){this.elements=[],e===window||e===document?this.elements=[e]:"string"==typeof e?this.elements=document.querySelectorAll(e):"object"==typeof e?this.elements=[e]:console.error(`Element ${e} not compatible!`)}assertElement(e,t){let n=0;e||(e=this.elements),n=Array.isArray(e)?e.length:1;for(let s=0,r=n;s<r;s++){let n=e[s];if(!(n instanceof Element||n===typeof HTMLDivElement))return console.warn(`Cannot do ${t||"that"}, ${typeof n} (${n}) is not supported!`),!1}return!0}addClass(e){if(!this.elements)return this;let t=this.elements;for(let n=0,s=t.length;n<s;n++){let s=t[n];this.assertElement(t[n],"addClass")&&s.classList.add(e)}return this}removeClass(e){if(!this.assertElement(null,"removeClass"))return this;return this.elements.forEach((t=>t.classList.remove(e))),this}find(e){if(!this.assertElement(null,"find"))return this;let t=this.elements,n=[];t.forEach((t=>{const s=t.querySelectorAll(e);n.push(...Array.from(s))}));const s=new NotJQuery(null);return s.elements=n,s}val(e){var t;if(!this.assertElement(null,"val"))return this;if(void 0===e){this.elements[0];return(null===(t=this.elements[0])||void 0===t?void 0:t.value)||""}return this.elements.forEach((t=>t.value=e)),this}on(e,t){return this.elements.forEach((n=>n.addEventListener(e,t))),this}off(e,t){var n;for(let s=0,r=this.elements.length;s<r;s++){const r=this.elements[s];if(r instanceof Element||r===window||r===document)if(e)if(t)r.removeEventListener(e,t);else{const e=r.cloneNode(!0);null===(n=r.parentNode)||void 0===n||n.replaceChild(e,r)}else console.warn("You must specify an event type when calling .off().")}return this}_get_width_or_height(e){const t=this.elements[0];return t===window?"width"===e?window.innerWidth:window.innerHeight:t instanceof Element?t.getBoundingClientRect()[e]:(console.warn("Cannot determine width for the given selector."),null)}width(){return this._get_width_or_height("width")}height(){return this._get_width_or_height("height")}each(e){if(!this.elements||0===this.elements.length)return console.warn("No elements to iterate through."),this;this.elements.forEach(((t,n)=>{e(n,t)}))}ready(e){this.elements[0]===document?"loading"===document.readyState?document.addEventListener("DOMContentLoaded",e):e():console.warn("ready() is only available on the document object.")}}const ProxyNotJQuery=e=>{const t=new NotJQuery(e);return new Proxy(t,{get:(e,t)=>Reflect.get(e,t)})};window.$=ProxyNotJQuery,window.jQuery=window.$;
//# sourceMappingURL=not-jquery.js.map
